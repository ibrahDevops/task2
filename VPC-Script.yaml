AWSTemplateFormatVersion: 2010-09-09

Description: This template creates a vpc with 6 subnets (public and private)
 

# Metadata: 

Parameters:
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  PublicSubnet1CIDR:
    Default: 10.0.0.0/23
    Description: Please enter the IP range (CIDR notation) for the public subnet 1
    Type: String

  PublicSubnet2CIDR:
    Default: 10.0.1.0/23
    Description: Please enter the IP range (CIDR notation) for the public subnet 2
    Type: String

  PrivateSubnet1CIDR:
    Default: 10.0.2.0/18
    Description: Please enter the IP range (CIDR notation) for the private subnet 1
    Type: String

  PrivateSubnet2CIDR:
    Default: 10.0.3.0/18
    Description: Please enter the IP range (CIDR notation) for the private subnet 2
    Type: String

  PrivateSubnet3CIDR:
    Default: 10.0.4.0/18
    Description: Please enter the IP range (CIDR notation) for the private subnet 3
    Type: String

  PrivateSubnet4CIDR:
    Default: 10.0.5.0/18
    Description: Please enter the IP range (CIDR notation) for the private subnet 4
    Type: String
    
  
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: VPC
  
  InternetGateway:
  Type: AWS::EC2::InternetGateway
  Properties: 
    Tags: 
      - Key: Name 
        Value: IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Create Public Subnet1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref VPC

  # Create Public Subnet2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref VPC

  # Create Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public Route Table
      VpcId: !Ref VPC

  # Add a Public Route to the Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  # Associate Public Subnet1 with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Associate Public Subnet2 with Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# Create Private Subnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false 
      # Because instances in private subnet should not have an ip address 
      Tags:
        - Key: Name
          Value: Private Subnet 1 (Application Tier)
      VpcId: !Ref VPC

# Create Private Subnet2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 2 (Application Tier)
      VpcId: !Ref VPC

# Create Private Subnet3
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 3 (Database Tier)
      VpcId: !Ref VPC

# Create Private Subnet4
  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet4CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 4 (Database Tier)
      VpcId: !Ref VPC


Outputs:

# Export VPC ID
  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC

# Export Public Subnet 1 
  PublicSubnet1:
    Description: Public Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1
    Value: !Ref PublicSubnet1

# Export Public Subnet 2
  PublicSubnet2:
    Description: Public Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2
    Value: !Ref PublicSubnet2

# Export Private Subnet 1
  PrivateSubnet1:
    Description: Private Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
    Value: !Ref PrivateSubnet1

# Export Private Subnet 2
  PrivateSubnet2:
    Description: Private Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
    Value: !Ref PrivateSubnet2

# Export Private Subnet 3
  PrivateSubnet3:
    Description: Private Subnet 3 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3
    Value: !Ref PrivateSubnet3

# Export Private Subnet 4
  PrivateSubnet4:
    Description: Private Subnet 4 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet4
    Value: !Ref PrivateSubnet4
